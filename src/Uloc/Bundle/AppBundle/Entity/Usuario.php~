<?php
/**
 * Este arquivo é parte do código fonte Uloc
 *
 * (c) Tiago Felipe <tiago@tiagofelipe.com>
 *
 * Para informações completas dos direitos autorais, por favor veja o arquivo LICENSE
 * distribuído junto com o código fonte.
 */

namespace Uloc\Bundle\AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Uloc\Bundle\AppBundle\Entity\Notificacao\Notificacao;
use Uloc\Bundle\AppBundle\Entity\Pessoa\Pessoa;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Uloc\Bundle\AppBundle\Entity\Notificacao\NotificacaoUsuario;

/**
 * @UniqueEntity(
 *     fields={"email"},
 *     message="O email informado já está sendo utilizado por outra pessoa.")
 * @ORM\Table(name="app_usuario")
 * @ORM\Entity(repositoryClass="Uloc\Bundle\AppBundle\Repository\UsuarioRepository")
 */
class Usuario implements UserInterface
{
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @Assert\NotBlank(message="Necessario informar um nome de usuario")
     * @ORM\Column(type="string", unique=true)
     */
    private $username;

    /**
     * @Assert\NotBlank(message="Necessario informar um email para o novo usuario")
     * @Assert\Email(message="Necessario informar um email válido para o novo usuario", checkMX=true)
     * @ORM\Column(type="string", unique=true)
     */
    private $email;

    /**
     * @ORM\Column(type="string", length=64)
     */
    private $password;

    /**
     * @ORM\Column(type="array", nullable=true)
     */
    private $roles;

    /**
     * Um Usuario tem Muitas NotificacaoUsuario
     * @ORM\OneToMany(targetEntity="Uloc\Bundle\AppBundle\Entity\Notificacao\NotificacaoUsuario", mappedBy="usuario")
     */
    private $notificacoes;

    /**
     * Muitos Usuarios tem Um Pessoa.
     * @ORM\ManyToOne(targetEntity="Uloc\Bundle\AppBundle\Entity\Pessoa\Pessoa", inversedBy="usuarios")
     * @ORM\JoinColumn(name="pessoa_id", referencedColumnName="id")
     */
    private $pessoa;

    /**
     * One Usuario existe One ACL.
     * @ORM\OneToOne(targetEntity="UsuarioACL", mappedBy="usuario")
     */
    private $acl;

    /**
     * Many Users have Many Groups.
     * @ORM\ManyToMany(targetEntity="GrupoUsuario", inversedBy="usuarios")
     * @ORM\JoinTable(name="app_usuarios_grupos")
     */
    private $grupos;

    /**
     * @return mixed
     */
    public function getAcl()
    {
        return $this->acl;
    }

    /**
     * @param mixed $acl
     */
    public function setAcl(UsuarioACL $acl)
    {
        $this->acl = $acl;
    }

    /**
     * @return Pessoa
     */
    public function getPessoa()
    {
        return $this->pessoa;
    }

    /**
     * @param Pessoa $pessoa
     */
    public function setPessoa(Pessoa $pessoa)
    {
        $pessoa->addUsuario($this);
        $this->pessoa = $pessoa;
    }

    public function __construct()
    {
        $this->notificacoes = new ArrayCollection();
        $this->grupos = new ArrayCollection();
    }

    /**
     * @return mixed
     */
    public function getNotificacoes()
    {
        return $this->notificacoes;
    }

    /**
     * @param Notificacao $notificacao
     */
    public function addNotificacao(Notificacao $notificacao)
    {
        $this->notificacoes[] = $notificacao;
    }

    public function getId()
    {
        return $this->id;
    }

    public function getUsername()
    {
        return $this->username;
    }

    public function setUsername($username)
    {
        $this->username = $username;
    }

    public function getEmail()
    {
        return $this->email;
    }

    public function setEmail($email)
    {
        $this->email = $email;
    }

    public function getPassword()
    {
        return $this->password;
    }

    public function setPassword($password)
    {
        $this->password = $password;
    }

    public function getRoles()
    {
        return $this->roles;
    }

    /**
     * @param mixed $roles
     */
    public function setRoles($roles)
    {
        $this->roles = $roles;
    }

    public function getSalt()
    {
        return;
    }

    public function eraseCredentials()
    {
    }

    /**
     * @return mixed
     */
    public function getGrupos()
    {
        return $this->grupos;
    }

    /**
     * @param mixed $grupo
     */
    public function addGrupo(GrupoUsuario $grupo)
    {
        $this->grupos[] = $grupo;
    }

    /**
     * Add notificaco
     *
     * @param \Uloc\Bundle\AppBundle\Entity\Notificacao\NotificacaoUsuario $notificaco
     *
     * @return Usuario
     */
    public function addNotificaco(\Uloc\Bundle\AppBundle\Entity\Notificacao\NotificacaoUsuario $notificaco)
    {
        $this->notificacoes[] = $notificaco;

        return $this;
    }

    /**
     * Remove notificaco
     *
     * @param \Uloc\Bundle\AppBundle\Entity\Notificacao\NotificacaoUsuario $notificaco
     */
    public function removeNotificaco(\Uloc\Bundle\AppBundle\Entity\Notificacao\NotificacaoUsuario $notificaco)
    {
        $this->notificacoes->removeElement($notificaco);
    }

    /**
     * Remove grupo
     *
     * @param \Uloc\Bundle\AppBundle\Entity\GrupoUsuario $grupo
     */
    public function removeGrupo(\Uloc\Bundle\AppBundle\Entity\GrupoUsuario $grupo)
    {
        $this->grupos->removeElement($grupo);
    }
}
